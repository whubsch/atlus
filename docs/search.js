window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "atlus", "modulename": "atlus", "kind": "module", "doc": "<p><code>atlus</code> is a Python package to convert raw address and phone number strings into the OSM format.\nIt's designed to be used with US and Canadian phone numbers and addresses.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">atlus</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">atlus</span><span class=\"o\">.</span><span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;St. Francis&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Saint Francis&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">atlus</span><span class=\"o\">.</span><span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;789 Oak Dr, Smallville California, 98765&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;789&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Oak Drive&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:city&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Smallville&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:state&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;CA&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:postcode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;98765&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">atlus</span><span class=\"o\">.</span><span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;(202) 900-9019&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;+1 202-900-9019&quot;</span>\n</code></pre>\n</div>\n"}, {"fullname": "atlus.get_address", "modulename": "atlus", "qualname": "get_address", "kind": "function", "doc": "<p>Process address strings.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;345 MAPLE RD, COUNTRYSIDE, PA 24680-0198&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;345&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Maple Road&quot;</span><span class=\"p\">,</span>\n<span class=\"s2\">&quot;addr:city&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Countryside&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:state&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PA&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:postcode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;24680-0198&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;777 Strawberry St.&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;777&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Strawberry Street&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;222 NW Pineapple Ave Suite A Unit B&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;222&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Northwest Pineapple Avenue&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">&quot;addr:unit&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>address_string (str):</strong>  The address string to process.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[Dict[str, str], List[Union[str, None]]]:\n  The processed address string and the removed fields.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.get_phone", "modulename": "atlus", "qualname": "get_phone", "kind": "function", "doc": "<p>Format phone numbers to the US and Canadian standard format of <code>+1 XXX-XXX-XXXX</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;2029009019&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;+1 202-900-9019&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;(202) 900-9019&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;+1 202-900-9019&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;202-900-901&quot;</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">phone</span> <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"mi\">202</span><span class=\"o\">-</span><span class=\"mi\">900</span><span class=\"o\">-</span><span class=\"mi\">901</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phone (str):</strong>  The phone number to format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted phone number.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the phone number is invalid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phone</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.abbrs", "modulename": "atlus", "qualname": "abbrs", "kind": "function", "doc": "<p>Bundle most common abbreviation expansion functions.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;St. Francis&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Saint Francis&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;E St.&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;E Street&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;E Sewell St&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;East Sewell Street&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (str):</strong>  String to expand.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Expanded string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.get_title", "modulename": "atlus", "qualname": "get_title", "kind": "function", "doc": "<p>Fix ALL-CAPS string.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;PALM BEACH&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Palm Beach&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;BOSTON&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;BOSTON&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;BOSTON&quot;</span><span class=\"p\">,</span> <span class=\"n\">single_word</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Boston&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n<li><strong>single_word:</strong>  Whether the string should be fixed even if it is a single word.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">single_word</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.mc_replace", "modulename": "atlus", "qualname": "mc_replace", "kind": "function", "doc": "<p>Fix string containing improperly formatted Mc- prefix.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mc_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Fort Mchenry&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Fort McHenry&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.us_replace", "modulename": "atlus", "qualname": "us_replace", "kind": "function", "doc": "<p>Fix string containing improperly formatted US.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">us_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;U.S. Route 15&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;US Route 15&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.ord_replace", "modulename": "atlus", "qualname": "ord_replace", "kind": "function", "doc": "<p>Fix string containing improperly capitalized ordinal.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ord_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;3Rd St. NW&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;3rd St. NW&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.remove_br_unicode", "modulename": "atlus", "qualname": "remove_br_unicode", "kind": "function", "doc": "<p>Clean the input string before sending to parser by removing newlines and unicode.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>old (str):</strong>  String to clean.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Cleaned string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus", "modulename": "atlus.atlus", "kind": "module", "doc": "<p>Functions and tools to process the raw address strings.</p>\n"}, {"fullname": "atlus.atlus.toss_tags", "modulename": "atlus.atlus", "qualname": "toss_tags", "kind": "variable", "doc": "<p>Tags from the <code>usaddress</code> package to remove.</p>\n", "default_value": "[&#x27;Recipient&#x27;, &#x27;IntersectionSeparator&#x27;, &#x27;LandmarkName&#x27;, &#x27;USPSBoxGroupID&#x27;, &#x27;USPSBoxGroupType&#x27;, &#x27;USPSBoxID&#x27;, &#x27;USPSBoxType&#x27;, &#x27;OccupancyType&#x27;]"}, {"fullname": "atlus.atlus.osm_mapping", "modulename": "atlus.atlus", "qualname": "osm_mapping", "kind": "variable", "doc": "<p>Mapping from <code>usaddress</code> fields to OSM tags.</p>\n", "default_value": "{&#x27;AddressNumber&#x27;: &#x27;addr:housenumber&#x27;, &#x27;AddressNumberPrefix&#x27;: &#x27;addr:housenumber&#x27;, &#x27;AddressNumberSuffix&#x27;: &#x27;addr:housenumber&#x27;, &#x27;StreetName&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePreDirectional&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePreModifier&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePreType&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePostDirectional&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePostModifier&#x27;: &#x27;addr:street&#x27;, &#x27;StreetNamePostType&#x27;: &#x27;addr:street&#x27;, &#x27;OccupancyIdentifier&#x27;: &#x27;addr:unit&#x27;, &#x27;PlaceName&#x27;: &#x27;addr:city&#x27;, &#x27;StateName&#x27;: &#x27;addr:state&#x27;, &#x27;ZipCode&#x27;: &#x27;addr:postcode&#x27;}"}, {"fullname": "atlus.atlus.get_title", "modulename": "atlus.atlus", "qualname": "get_title", "kind": "function", "doc": "<p>Fix ALL-CAPS string.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;PALM BEACH&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Palm Beach&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;BOSTON&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;BOSTON&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_title</span><span class=\"p\">(</span><span class=\"s2\">&quot;BOSTON&quot;</span><span class=\"p\">,</span> <span class=\"n\">single_word</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Boston&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n<li><strong>single_word:</strong>  Whether the string should be fixed even if it is a single word.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">single_word</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.us_replace", "modulename": "atlus.atlus", "qualname": "us_replace", "kind": "function", "doc": "<p>Fix string containing improperly formatted US.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">us_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;U.S. Route 15&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;US Route 15&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.mc_replace", "modulename": "atlus.atlus", "qualname": "mc_replace", "kind": "function", "doc": "<p>Fix string containing improperly formatted Mc- prefix.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mc_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;Fort Mchenry&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Fort McHenry&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.ord_replace", "modulename": "atlus.atlus", "qualname": "ord_replace", "kind": "function", "doc": "<p>Fix string containing improperly capitalized ordinal.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ord_replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;3Rd St. NW&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;3rd St. NW&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.name_street_expand", "modulename": "atlus.atlus", "qualname": "name_street_expand", "kind": "function", "doc": "<p>Expand matched street type abbreviations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>match (regex.Match):</strong>  Matched string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Expanded string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">_regex</span><span class=\"o\">.</span><span class=\"n\">Match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.direct_expand", "modulename": "atlus.atlus", "qualname": "direct_expand", "kind": "function", "doc": "<p>Expand matched directional abbreviations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>match (regex.Match):</strong>  Matched string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Expanded string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">_regex</span><span class=\"o\">.</span><span class=\"n\">Match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.cap_match", "modulename": "atlus.atlus", "qualname": "cap_match", "kind": "function", "doc": "<p>Make matches uppercase.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>match (regex.Match):</strong>  Matched string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Capitalized string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">_regex</span><span class=\"o\">.</span><span class=\"n\">Match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.lower_match", "modulename": "atlus.atlus", "qualname": "lower_match", "kind": "function", "doc": "<p>Lower-case improperly cased ordinal values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value:</strong>  String to fix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Fixed string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"n\">_regex</span><span class=\"o\">.</span><span class=\"n\">Match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.grid_match", "modulename": "atlus.atlus", "qualname": "grid_match", "kind": "function", "doc": "<p>Clean grid addresses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">match_str</span><span class=\"p\">:</span> <span class=\"n\">_regex</span><span class=\"o\">.</span><span class=\"n\">Match</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.abbrs", "modulename": "atlus.atlus", "qualname": "abbrs", "kind": "function", "doc": "<p>Bundle most common abbreviation expansion functions.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;St. Francis&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;Saint Francis&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;E St.&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;E Street&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">abbrs</span><span class=\"p\">(</span><span class=\"s2\">&quot;E Sewell St&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;East Sewell Street&quot;</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (str):</strong>  String to expand.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Expanded string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.remove_br_unicode", "modulename": "atlus.atlus", "qualname": "remove_br_unicode", "kind": "function", "doc": "<p>Clean the input string before sending to parser by removing newlines and unicode.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>old (str):</strong>  String to clean.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Cleaned string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.clean_address", "modulename": "atlus.atlus", "qualname": "clean_address", "kind": "function", "doc": "<p>Clean the input string before sending to parser by removing newlines and unicode.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>address_string (str):</strong>  String to clean.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: Cleaned string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.help_join", "modulename": "atlus.atlus", "qualname": "help_join", "kind": "function", "doc": "<p>Help to join address fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span>, </span><span class=\"param\"><span class=\"n\">keep</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.addr_street", "modulename": "atlus.atlus", "qualname": "addr_street", "kind": "function", "doc": "<p>Build the street field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.addr_housenumber", "modulename": "atlus.atlus", "qualname": "addr_housenumber", "kind": "function", "doc": "<p>Build the housenumber field.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.collapse_list", "modulename": "atlus.atlus", "qualname": "collapse_list", "kind": "function", "doc": "<p>Remove duplicates in list while keeping order.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">collapse_list</span><span class=\"p\">([</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">])</span>\n<span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seq (list):</strong>  The list to collapse.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list: The collapsed list.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seq</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.split_unit", "modulename": "atlus.atlus", "qualname": "split_unit", "kind": "function", "doc": "<p>Split unit from address string, if present.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.remove_prefix", "modulename": "atlus.atlus", "qualname": "remove_prefix", "kind": "function", "doc": "<p>Remove prefix from string for Python 3.8.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.get_address", "modulename": "atlus.atlus", "qualname": "get_address", "kind": "function", "doc": "<p>Process address strings.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;345 MAPLE RD, COUNTRYSIDE, PA 24680-0198&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;345&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Maple Road&quot;</span><span class=\"p\">,</span>\n<span class=\"s2\">&quot;addr:city&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Countryside&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:state&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PA&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:postcode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;24680-0198&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;777 Strawberry St.&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;777&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Strawberry Street&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"s2\">&quot;222 NW Pineapple Ave Suite A Unit B&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">{</span><span class=\"s2\">&quot;addr:housenumber&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;222&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addr:street&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Northwest Pineapple Avenue&quot;</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">address</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s2\">&quot;addr:unit&quot;</span><span class=\"p\">]</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>address_string (str):</strong>  The address string to process.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[Dict[str, str], List[Union[str, None]]]:\n  The processed address string and the removed fields.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.atlus.get_phone", "modulename": "atlus.atlus", "qualname": "get_phone", "kind": "function", "doc": "<p>Format phone numbers to the US and Canadian standard format of <code>+1 XXX-XXX-XXXX</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;2029009019&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;+1 202-900-9019&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;(202) 900-9019&quot;</span><span class=\"p\">)</span>\n<span class=\"s2\">&quot;+1 202-900-9019&quot;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">get_phone</span><span class=\"p\">(</span><span class=\"s2\">&quot;202-900-901&quot;</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Invalid</span> <span class=\"n\">phone</span> <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"mi\">202</span><span class=\"o\">-</span><span class=\"mi\">900</span><span class=\"o\">-</span><span class=\"mi\">901</span>\n</code></pre>\n</div>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>phone (str):</strong>  The phone number to format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted phone number.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the phone number is invalid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phone</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "atlus.resources", "modulename": "atlus.resources", "kind": "module", "doc": "<p>Hold info for the processing script.</p>\n"}, {"fullname": "atlus.resources.direction_expand", "modulename": "atlus.resources", "qualname": "direction_expand", "kind": "variable", "doc": "<p>Compass direction abbreviations.</p>\n", "default_value": "{&#x27;NE&#x27;: &#x27;Northeast&#x27;, &#x27;SE&#x27;: &#x27;Southeast&#x27;, &#x27;NW&#x27;: &#x27;Northwest&#x27;, &#x27;SW&#x27;: &#x27;Southwest&#x27;, &#x27;N&#x27;: &#x27;North&#x27;, &#x27;E&#x27;: &#x27;East&#x27;, &#x27;S&#x27;: &#x27;South&#x27;, &#x27;W&#x27;: &#x27;West&#x27;}"}, {"fullname": "atlus.resources.name_expand", "modulename": "atlus.resources", "qualname": "name_expand", "kind": "variable", "doc": "<p>Common name abbreviations.</p>\n", "default_value": "{&#x27;ARPT&#x27;: &#x27;airport&#x27;, &#x27;BLDG&#x27;: &#x27;building&#x27;, &#x27;CONF&#x27;: &#x27;conference&#x27;, &#x27;CONV&#x27;: &#x27;convention&#x27;, &#x27;CNTR&#x27;: &#x27;center&#x27;, &#x27;CTR&#x27;: &#x27;center&#x27;, &#x27;DWTN&#x27;: &#x27;downtown&#x27;, &#x27;INTL&#x27;: &#x27;international&#x27;, &#x27;FT&#x27;: &#x27;fort&#x27;, &#x27;MT&#x27;: &#x27;mount&#x27;, &#x27;MTN&#x27;: &#x27;mountain&#x27;, &#x27;SHPG&#x27;: &#x27;shopping&#x27;}"}, {"fullname": "atlus.resources.state_expand", "modulename": "atlus.resources", "qualname": "state_expand", "kind": "variable", "doc": "<p>Map states to abbreviations.</p>\n", "default_value": "{&#x27;ALABAMA&#x27;: &#x27;AL&#x27;, &#x27;ALA&#x27;: &#x27;AL&#x27;, &#x27;ALASKA&#x27;: &#x27;AK&#x27;, &#x27;ALAS&#x27;: &#x27;AK&#x27;, &#x27;ARIZONA&#x27;: &#x27;AZ&#x27;, &#x27;ARIZ&#x27;: &#x27;AZ&#x27;, &#x27;ARKANSAS&#x27;: &#x27;AR&#x27;, &#x27;ARK&#x27;: &#x27;AR&#x27;, &#x27;CALIFORNIA&#x27;: &#x27;CA&#x27;, &#x27;CALIF&#x27;: &#x27;CA&#x27;, &#x27;CAL&#x27;: &#x27;CA&#x27;, &#x27;COLORADO&#x27;: &#x27;CO&#x27;, &#x27;COLO&#x27;: &#x27;CO&#x27;, &#x27;COL&#x27;: &#x27;CO&#x27;, &#x27;CONNECTICUT&#x27;: &#x27;CT&#x27;, &#x27;CONN&#x27;: &#x27;CT&#x27;, &#x27;DELAWARE&#x27;: &#x27;DE&#x27;, &#x27;DEL&#x27;: &#x27;DE&#x27;, &#x27;DISTRICT OF COLUMBIA&#x27;: &#x27;DC&#x27;, &#x27;FLORIDA&#x27;: &#x27;FL&#x27;, &#x27;FLA&#x27;: &#x27;FL&#x27;, &#x27;FLOR&#x27;: &#x27;FL&#x27;, &#x27;GEORGIA&#x27;: &#x27;GA&#x27;, &#x27;GA&#x27;: &#x27;GA&#x27;, &#x27;HAWAII&#x27;: &#x27;HI&#x27;, &#x27;IDAHO&#x27;: &#x27;ID&#x27;, &#x27;IDA&#x27;: &#x27;ID&#x27;, &#x27;ILLINOIS&#x27;: &#x27;IL&#x27;, &#x27;ILL&#x27;: &#x27;IL&#x27;, &#x27;INDIANA&#x27;: &#x27;IN&#x27;, &#x27;IND&#x27;: &#x27;IN&#x27;, &#x27;IOWA&#x27;: &#x27;IA&#x27;, &#x27;KANSAS&#x27;: &#x27;KS&#x27;, &#x27;KANS&#x27;: &#x27;KS&#x27;, &#x27;KAN&#x27;: &#x27;KS&#x27;, &#x27;KENTUCKY&#x27;: &#x27;KY&#x27;, &#x27;KEN&#x27;: &#x27;KY&#x27;, &#x27;KENT&#x27;: &#x27;KY&#x27;, &#x27;LOUISIANA&#x27;: &#x27;LA&#x27;, &#x27;MAINE&#x27;: &#x27;ME&#x27;, &#x27;MARYLAND&#x27;: &#x27;MD&#x27;, &#x27;MASSACHUSETTS&#x27;: &#x27;MA&#x27;, &#x27;MASS&#x27;: &#x27;MA&#x27;, &#x27;MICHIGAN&#x27;: &#x27;MI&#x27;, &#x27;MICH&#x27;: &#x27;MI&#x27;, &#x27;MINNESOTA&#x27;: &#x27;MN&#x27;, &#x27;MINN&#x27;: &#x27;MN&#x27;, &#x27;MISSISSIPPI&#x27;: &#x27;MS&#x27;, &#x27;MISS&#x27;: &#x27;MS&#x27;, &#x27;MISSOURI&#x27;: &#x27;MO&#x27;, &#x27;MONTANA&#x27;: &#x27;MT&#x27;, &#x27;MONT&#x27;: &#x27;MT&#x27;, &#x27;NEBRASKA&#x27;: &#x27;NE&#x27;, &#x27;NEBR&#x27;: &#x27;NE&#x27;, &#x27;NEB&#x27;: &#x27;NE&#x27;, &#x27;NEVADA&#x27;: &#x27;NV&#x27;, &#x27;NEV&#x27;: &#x27;NV&#x27;, &#x27;NEW HAMPSHIRE&#x27;: &#x27;NH&#x27;, &#x27;NEW JERSEY&#x27;: &#x27;NJ&#x27;, &#x27;NEW MEXICO&#x27;: &#x27;NM&#x27;, &#x27;N MEX&#x27;: &#x27;NM&#x27;, &#x27;NEW M&#x27;: &#x27;NM&#x27;, &#x27;NEW YORK&#x27;: &#x27;NY&#x27;, &#x27;NORTH CAROLINA&#x27;: &#x27;NC&#x27;, &#x27;NORTH DAKOTA&#x27;: &#x27;ND&#x27;, &#x27;N DAK&#x27;: &#x27;ND&#x27;, &#x27;OHIO&#x27;: &#x27;OH&#x27;, &#x27;OKLAHOMA&#x27;: &#x27;OK&#x27;, &#x27;OKLA&#x27;: &#x27;OK&#x27;, &#x27;OREGON&#x27;: &#x27;OR&#x27;, &#x27;OREG&#x27;: &#x27;OR&#x27;, &#x27;ORE&#x27;: &#x27;OR&#x27;, &#x27;PENNSYLVANIA&#x27;: &#x27;PA&#x27;, &#x27;PENN&#x27;: &#x27;PA&#x27;, &#x27;RHODE ISLAND&#x27;: &#x27;RI&#x27;, &#x27;SOUTH CAROLINA&#x27;: &#x27;SC&#x27;, &#x27;SOUTH DAKOTA&#x27;: &#x27;SD&#x27;, &#x27;S DAK&#x27;: &#x27;SD&#x27;, &#x27;TENNESSEE&#x27;: &#x27;TN&#x27;, &#x27;TENN&#x27;: &#x27;TN&#x27;, &#x27;TEXAS&#x27;: &#x27;TX&#x27;, &#x27;TEX&#x27;: &#x27;TX&#x27;, &#x27;UTAH&#x27;: &#x27;UT&#x27;, &#x27;VERMONT&#x27;: &#x27;VT&#x27;, &#x27;VIRGINIA&#x27;: &#x27;VA&#x27;, &#x27;WASHINGTON&#x27;: &#x27;WA&#x27;, &#x27;WASH&#x27;: &#x27;WA&#x27;, &#x27;WEST VIRGINIA&#x27;: &#x27;WV&#x27;, &#x27;W VA&#x27;: &#x27;WV&#x27;, &#x27;WISCONSIN&#x27;: &#x27;WI&#x27;, &#x27;WIS&#x27;: &#x27;WI&#x27;, &#x27;WISC&#x27;: &#x27;WI&#x27;, &#x27;WYOMING&#x27;: &#x27;WY&#x27;, &#x27;WYO&#x27;: &#x27;WY&#x27;, &#x27;ONTARIO&#x27;: &#x27;ON&#x27;, &#x27;QUEBEC&#x27;: &#x27;QC&#x27;, &#x27;NOVA SCOTIA&#x27;: &#x27;NS&#x27;, &#x27;NEW BRUNSWICK&#x27;: &#x27;NB&#x27;, &#x27;MANITOBA&#x27;: &#x27;MB&#x27;, &#x27;BRITISH COLUMBIA&#x27;: &#x27;BC&#x27;, &#x27;PRINCE EDWARD ISLAND&#x27;: &#x27;PE&#x27;, &#x27;PRINCE EDWARD&#x27;: &#x27;PE&#x27;, &#x27;SASKATCHEWAN&#x27;: &#x27;SK&#x27;, &#x27;ALBERTA&#x27;: &#x27;AB&#x27;, &#x27;NEWFOUNDLAND AND LABRADOR&#x27;: &#x27;NL&#x27;, &#x27;NEWFOUNDLAND &amp; LABRADOR&#x27;: &#x27;NL&#x27;, &#x27;NEWFOUNDLAND&#x27;: &#x27;NL&#x27;, &#x27;YUKON&#x27;: &#x27;YK&#x27;, &#x27;NUNAVUT&#x27;: &#x27;NU&#x27;, &#x27;NORTHWEST TERRITORIES&#x27;: &#x27;NT&#x27;, &#x27;NW TERRITORIES&#x27;: &#x27;NT&#x27;}"}, {"fullname": "atlus.resources.street_expand", "modulename": "atlus.resources", "qualname": "street_expand", "kind": "variable", "doc": "<p>Common street type abbreviations.</p>\n", "default_value": "{&#x27;ACC&#x27;: &#x27;ACCESS&#x27;, &#x27;ALY&#x27;: &#x27;ALLEY&#x27;, &#x27;ANX&#x27;: &#x27;ANEX&#x27;, &#x27;ARC&#x27;: &#x27;ARCADE&#x27;, &#x27;AV&#x27;: &#x27;AVENUE&#x27;, &#x27;AVE&#x27;: &#x27;AVENUE&#x27;, &#x27;BYU&#x27;: &#x27;BAYOU&#x27;, &#x27;BCH&#x27;: &#x27;BEACH&#x27;, &#x27;BND&#x27;: &#x27;BEND&#x27;, &#x27;BLF&#x27;: &#x27;BLUFF&#x27;, &#x27;BLFS&#x27;: &#x27;BLUFFS&#x27;, &#x27;BTM&#x27;: &#x27;BOTTOM&#x27;, &#x27;BLVD&#x27;: &#x27;BOULEVARD&#x27;, &#x27;BR&#x27;: &#x27;BRANCH&#x27;, &#x27;BRG&#x27;: &#x27;BRIDGE&#x27;, &#x27;BRK&#x27;: &#x27;BROOK&#x27;, &#x27;BRKS&#x27;: &#x27;BROOKS&#x27;, &#x27;BG&#x27;: &#x27;BURG&#x27;, &#x27;BGS&#x27;: &#x27;BURGS&#x27;, &#x27;BYP&#x27;: &#x27;BYPASS&#x27;, &#x27;CP&#x27;: &#x27;CAMP&#x27;, &#x27;CY&#x27;: &#x27;KEY&#x27;, &#x27;CYN&#x27;: &#x27;CANYON&#x27;, &#x27;CPE&#x27;: &#x27;CAPE&#x27;, &#x27;CTR&#x27;: &#x27;CENTER&#x27;, &#x27;CTRS&#x27;: &#x27;CENTERS&#x27;, &#x27;CIR&#x27;: &#x27;CIRCLE&#x27;, &#x27;CIRS&#x27;: &#x27;CIRCLES&#x27;, &#x27;CLF&#x27;: &#x27;CLIFF&#x27;, &#x27;CLFS&#x27;: &#x27;CLIFFS&#x27;, &#x27;CLB&#x27;: &#x27;CLUB&#x27;, &#x27;CMN&#x27;: &#x27;COMMON&#x27;, &#x27;CMNS&#x27;: &#x27;COMMONS&#x27;, &#x27;COR&#x27;: &#x27;CORNER&#x27;, &#x27;CORS&#x27;: &#x27;CORNERS&#x27;, &#x27;CRSE&#x27;: &#x27;COURSE&#x27;, &#x27;CT&#x27;: &#x27;COURT&#x27;, &#x27;CTS&#x27;: &#x27;COURTS&#x27;, &#x27;CV&#x27;: &#x27;COVE&#x27;, &#x27;CVS&#x27;: &#x27;COVES&#x27;, &#x27;CRK&#x27;: &#x27;CREEK&#x27;, &#x27;CRES&#x27;: &#x27;CRESCENT&#x27;, &#x27;CRST&#x27;: &#x27;CREST&#x27;, &#x27;CSWY&#x27;: &#x27;CAUSEWAY&#x27;, &#x27;CURV&#x27;: &#x27;CURVE&#x27;, &#x27;DL&#x27;: &#x27;DALE&#x27;, &#x27;DM&#x27;: &#x27;DAM&#x27;, &#x27;DV&#x27;: &#x27;DIVIDE&#x27;, &#x27;DR&#x27;: &#x27;DRIVE&#x27;, &#x27;DRS&#x27;: &#x27;DRIVES&#x27;, &#x27;EST&#x27;: &#x27;ESTATE&#x27;, &#x27;EXPY&#x27;: &#x27;EXPRESSWAY&#x27;, &#x27;EXPWY&#x27;: &#x27;EXPRESSWAY&#x27;, &#x27;EXT&#x27;: &#x27;EXTENSION&#x27;, &#x27;EXTS&#x27;: &#x27;EXTENSIONS&#x27;, &#x27;FGR&#x27;: &#x27;FORGE&#x27;, &#x27;FGRS&#x27;: &#x27;FORGES&#x27;, &#x27;FLS&#x27;: &#x27;FALLS&#x27;, &#x27;FLD&#x27;: &#x27;FIELD&#x27;, &#x27;FLDS&#x27;: &#x27;FIELDS&#x27;, &#x27;FLT&#x27;: &#x27;FLAT&#x27;, &#x27;FLTS&#x27;: &#x27;FLATS&#x27;, &#x27;FRD&#x27;: &#x27;FORD&#x27;, &#x27;FRDS&#x27;: &#x27;FORDS&#x27;, &#x27;FRST&#x27;: &#x27;FOREST&#x27;, &#x27;FRG&#x27;: &#x27;FORGE&#x27;, &#x27;FRGS&#x27;: &#x27;FORGES&#x27;, &#x27;FRK&#x27;: &#x27;FORK&#x27;, &#x27;FRKS&#x27;: &#x27;FORKS&#x27;, &#x27;FRY&#x27;: &#x27;FERRY&#x27;, &#x27;FRYS&#x27;: &#x27;FERRYS&#x27;, &#x27;FOR&#x27;: &#x27;FORD&#x27;, &#x27;FORS&#x27;: &#x27;FORDS&#x27;, &#x27;FT&#x27;: &#x27;FORT&#x27;, &#x27;FWY&#x27;: &#x27;FREEWAY&#x27;, &#x27;GD&#x27;: &#x27;GRADE&#x27;, &#x27;GDN&#x27;: &#x27;GARDEN&#x27;, &#x27;GDNS&#x27;: &#x27;GARDENS&#x27;, &#x27;GTWY&#x27;: &#x27;GATEWAY&#x27;, &#x27;GLN&#x27;: &#x27;GLEN&#x27;, &#x27;GLNS&#x27;: &#x27;GLENS&#x27;, &#x27;GN&#x27;: &#x27;GREEN&#x27;, &#x27;GNS&#x27;: &#x27;GREENS&#x27;, &#x27;GRN&#x27;: &#x27;GREEN&#x27;, &#x27;GRNS&#x27;: &#x27;GREENS&#x27;, &#x27;GRV&#x27;: &#x27;GROVE&#x27;, &#x27;GRVS&#x27;: &#x27;GROVES&#x27;, &#x27;HBR&#x27;: &#x27;HARBOR&#x27;, &#x27;HBRS&#x27;: &#x27;HARBORS&#x27;, &#x27;HGWY&#x27;: &#x27;HIGHWAY&#x27;, &#x27;HVN&#x27;: &#x27;HAVEN&#x27;, &#x27;HTS&#x27;: &#x27;HEIGHTS&#x27;, &#x27;HWY&#x27;: &#x27;HIGHWAY&#x27;, &#x27;HL&#x27;: &#x27;HILL&#x27;, &#x27;HLS&#x27;: &#x27;HILLS&#x27;, &#x27;HOLW&#x27;: &#x27;HOLLOW&#x27;, &#x27;INLT&#x27;: &#x27;INLET&#x27;, &#x27;IS&#x27;: &#x27;ISLAND&#x27;, &#x27;ISS&#x27;: &#x27;ISLANDS&#x27;, &#x27;JCT&#x27;: &#x27;JUNCTION&#x27;, &#x27;JCTS&#x27;: &#x27;JUNCTIONS&#x27;, &#x27;KY&#x27;: &#x27;KEY&#x27;, &#x27;KYS&#x27;: &#x27;KEYS&#x27;, &#x27;KNL&#x27;: &#x27;KNOLL&#x27;, &#x27;KNLS&#x27;: &#x27;KNOLLS&#x27;, &#x27;LK&#x27;: &#x27;LAKE&#x27;, &#x27;LKS&#x27;: &#x27;LAKES&#x27;, &#x27;LNDG&#x27;: &#x27;LANDING&#x27;, &#x27;LN&#x27;: &#x27;LANE&#x27;, &#x27;LGT&#x27;: &#x27;LIGHT&#x27;, &#x27;LGTS&#x27;: &#x27;LIGHTS&#x27;, &#x27;LF&#x27;: &#x27;LOAF&#x27;, &#x27;LCK&#x27;: &#x27;LOCK&#x27;, &#x27;LCKS&#x27;: &#x27;LOCKS&#x27;, &#x27;LDG&#x27;: &#x27;LODGE&#x27;, &#x27;LP&#x27;: &#x27;LOOP&#x27;, &#x27;MNR&#x27;: &#x27;MANOR&#x27;, &#x27;MNRS&#x27;: &#x27;MANORS&#x27;, &#x27;MDW&#x27;: &#x27;MEADOW&#x27;, &#x27;MDWS&#x27;: &#x27;MEADOWS&#x27;, &#x27;ML&#x27;: &#x27;MILL&#x27;, &#x27;MLS&#x27;: &#x27;MILLS&#x27;, &#x27;MSN&#x27;: &#x27;MISSION&#x27;, &#x27;MTWY&#x27;: &#x27;MOTORWAY&#x27;, &#x27;MT&#x27;: &#x27;MOUNT&#x27;, &#x27;MTN&#x27;: &#x27;MOUNTAIN&#x27;, &#x27;MTNS&#x27;: &#x27;MOUNTAINS&#x27;, &#x27;NCK&#x27;: &#x27;NECK&#x27;, &#x27;ORCH&#x27;: &#x27;ORCHARD&#x27;, &#x27;OPAS&#x27;: &#x27;OVERPASS&#x27;, &#x27;PKY&#x27;: &#x27;PARKWAY&#x27;, &#x27;PKWY&#x27;: &#x27;PARKWAY&#x27;, &#x27;PSGE&#x27;: &#x27;PASSAGE&#x27;, &#x27;PNE&#x27;: &#x27;PINE&#x27;, &#x27;PNES&#x27;: &#x27;PINES&#x27;, &#x27;PL&#x27;: &#x27;PLACE&#x27;, &#x27;PLN&#x27;: &#x27;PLAIN&#x27;, &#x27;PLNS&#x27;: &#x27;PLAINS&#x27;, &#x27;PLZ&#x27;: &#x27;PLAZA&#x27;, &#x27;PT&#x27;: &#x27;POINT&#x27;, &#x27;PTS&#x27;: &#x27;POINTS&#x27;, &#x27;PRT&#x27;: &#x27;PORT&#x27;, &#x27;PRTS&#x27;: &#x27;PORTS&#x27;, &#x27;PR&#x27;: &#x27;PRAIRIE&#x27;, &#x27;PVT&#x27;: &#x27;PRIVATE&#x27;, &#x27;RADL&#x27;: &#x27;RADIAL&#x27;, &#x27;RNCH&#x27;: &#x27;RANCH&#x27;, &#x27;RPD&#x27;: &#x27;RAPID&#x27;, &#x27;RPDS&#x27;: &#x27;RAPIDS&#x27;, &#x27;RST&#x27;: &#x27;REST&#x27;, &#x27;RDG&#x27;: &#x27;RIDGE&#x27;, &#x27;RDGS&#x27;: &#x27;RIDGES&#x27;, &#x27;RIV&#x27;: &#x27;RIVER&#x27;, &#x27;RD&#x27;: &#x27;ROAD&#x27;, &#x27;RDS&#x27;: &#x27;ROADS&#x27;, &#x27;RT&#x27;: &#x27;ROUTE&#x27;, &#x27;RTE&#x27;: &#x27;ROUTE&#x27;, &#x27;SHL&#x27;: &#x27;SHOAL&#x27;, &#x27;SHLS&#x27;: &#x27;SHOALS&#x27;, &#x27;SHR&#x27;: &#x27;SHORE&#x27;, &#x27;SHRS&#x27;: &#x27;SHORES&#x27;, &#x27;SKWY&#x27;: &#x27;SKYWAY&#x27;, &#x27;SPG&#x27;: &#x27;SPRING&#x27;, &#x27;SPGS&#x27;: &#x27;SPRINGS&#x27;, &#x27;SQ&#x27;: &#x27;SQUARE&#x27;, &#x27;SQS&#x27;: &#x27;SQUARES&#x27;, &#x27;STA&#x27;: &#x27;STATION&#x27;, &#x27;STRA&#x27;: &#x27;STRAVENUE&#x27;, &#x27;STRM&#x27;: &#x27;STREAM&#x27;, &#x27;STS&#x27;: &#x27;STREETS&#x27;, &#x27;SMT&#x27;: &#x27;SUMMIT&#x27;, &#x27;SRVC&#x27;: &#x27;SERVICE&#x27;, &#x27;TER&#x27;: &#x27;TERRACE&#x27;, &#x27;TRWY&#x27;: &#x27;THROUGHWAY&#x27;, &#x27;THFR&#x27;: &#x27;THOROUGHFARE&#x27;, &#x27;TRCE&#x27;: &#x27;TRACE&#x27;, &#x27;TRAK&#x27;: &#x27;TRACK&#x27;, &#x27;TRFY&#x27;: &#x27;TRAFFICWAY&#x27;, &#x27;TRL&#x27;: &#x27;TRAIL&#x27;, &#x27;TRLR&#x27;: &#x27;TRAILER&#x27;, &#x27;TUNL&#x27;: &#x27;TUNNEL&#x27;, &#x27;TPKE&#x27;: &#x27;TURNPIKE&#x27;, &#x27;UPAS&#x27;: &#x27;UNDERPASS&#x27;, &#x27;UN&#x27;: &#x27;UNION&#x27;, &#x27;UNP&#x27;: &#x27;UNDERPASS&#x27;, &#x27;UNS&#x27;: &#x27;UNIONS&#x27;, &#x27;VIA&#x27;: &#x27;VIADUCT&#x27;, &#x27;VIAS&#x27;: &#x27;VIADUCTS&#x27;, &#x27;VLY&#x27;: &#x27;VALLEY&#x27;, &#x27;VLYS&#x27;: &#x27;VALLEYS&#x27;, &#x27;VW&#x27;: &#x27;VIEW&#x27;, &#x27;VWS&#x27;: &#x27;VIEWS&#x27;, &#x27;VLG&#x27;: &#x27;VILLAGE&#x27;, &#x27;VL&#x27;: &#x27;VILLE&#x27;, &#x27;VIS&#x27;: &#x27;VISTA&#x27;, &#x27;WK&#x27;: &#x27;WALK&#x27;, &#x27;WKWY&#x27;: &#x27;WALKWAY&#x27;, &#x27;WY&#x27;: &#x27;WAY&#x27;, &#x27;WL&#x27;: &#x27;WELL&#x27;, &#x27;WLS&#x27;: &#x27;WELLS&#x27;, &#x27;XING&#x27;: &#x27;CROSSING&#x27;, &#x27;XINGS&#x27;: &#x27;CROSSINGS&#x27;, &#x27;XRD&#x27;: &#x27;CROSSROAD&#x27;, &#x27;XRDS&#x27;: &#x27;CROSSROADS&#x27;, &#x27;YU&#x27;: &#x27;BAYOU&#x27;}"}, {"fullname": "atlus.resources.saints", "modulename": "atlus.resources", "qualname": "saints", "kind": "variable", "doc": "<p>Most common saint names.</p>\n", "default_value": "[&#x27;Abigail&#x27;, &#x27;Agatha&#x27;, &#x27;Agnes&#x27;, &#x27;Andrew&#x27;, &#x27;Anthony&#x27;, &#x27;Augustine&#x27;, &#x27;Bernadette&#x27;, &#x27;Brigid&#x27;, &#x27;Catherine&#x27;, &#x27;Charles&#x27;, &#x27;Christopher&#x27;, &#x27;Clare&#x27;, &#x27;Cloud&#x27;, &#x27;Dymphna&#x27;, &#x27;Elizabeth&#x27;, &#x27;Faustina&#x27;, &#x27;Felix&#x27;, &#x27;Francis&#x27;, &#x27;Gabriel,&#x27;, &#x27;George&#x27;, &#x27;Gerard&#x27;, &#x27;James&#x27;, &#x27;Joan&#x27;, &#x27;John&#x27;, &#x27;Joseph&#x27;, &#x27;Jude&#x27;, &#x27;Kateri&#x27;, &#x27;Louis&#x27;, &#x27;Lucie&#x27;, &#x27;Lucy&#x27;, &#x27;Luke&#x27;, &#x27;Maria&#x27;, &#x27;Mark&#x27;, &#x27;Martin&#x27;, &#x27;Mary&#x27;, &#x27;Maximilian&#x27;, &#x27;Michael&#x27;, &#x27;Monica&#x27;, &#x27;Padre&#x27;, &#x27;Patrick&#x27;, &#x27;Paul&#x27;, &#x27;Peter&#x27;, &#x27;Philomena&#x27;, &#x27;Raphael&#x27;, &#x27;Rita&#x27;, &#x27;Rose&#x27;, &#x27;Sebastian&#x27;, &#x27;Teresa&#x27;, &#x27;Therese&#x27;, &#x27;Thomas&#x27;, &#x27;Valentine&#x27;, &#x27;Victor&#x27;, &#x27;Vincent&#x27;]"}, {"fullname": "atlus.resources.bad_zip_first_3", "modulename": "atlus.resources", "qualname": "bad_zip_first_3", "kind": "variable", "doc": "<p>Three-digit combinations that don't represent a zip code.</p>\n", "default_value": "[&#x27;001&#x27;, &#x27;002&#x27;, &#x27;003&#x27;, &#x27;004&#x27;, &#x27;213&#x27;, &#x27;269&#x27;, &#x27;343&#x27;, &#x27;345&#x27;, &#x27;348&#x27;, &#x27;353&#x27;, &#x27;419&#x27;, &#x27;428&#x27;, &#x27;429&#x27;, &#x27;517&#x27;, &#x27;518&#x27;, &#x27;519&#x27;, &#x27;529&#x27;, &#x27;533&#x27;, &#x27;536&#x27;, &#x27;552&#x27;, &#x27;568&#x27;, &#x27;569&#x27;, &#x27;578&#x27;, &#x27;579&#x27;, &#x27;589&#x27;, &#x27;621&#x27;, &#x27;632&#x27;, &#x27;642&#x27;, &#x27;643&#x27;, &#x27;659&#x27;, &#x27;663&#x27;, &#x27;682&#x27;, &#x27;694&#x27;, &#x27;695&#x27;, &#x27;696&#x27;, &#x27;697&#x27;, &#x27;698&#x27;, &#x27;699&#x27;, &#x27;702&#x27;, &#x27;709&#x27;, &#x27;715&#x27;, &#x27;732&#x27;, &#x27;742&#x27;, &#x27;817&#x27;, &#x27;818&#x27;, &#x27;819&#x27;, &#x27;839&#x27;, &#x27;848&#x27;, &#x27;849&#x27;, &#x27;851&#x27;, &#x27;854&#x27;, &#x27;858&#x27;, &#x27;861&#x27;, &#x27;862&#x27;, &#x27;866&#x27;, &#x27;867&#x27;, &#x27;868&#x27;, &#x27;869&#x27;, &#x27;876&#x27;, &#x27;886&#x27;, &#x27;887&#x27;, &#x27;888&#x27;, &#x27;892&#x27;, &#x27;896&#x27;, &#x27;899&#x27;, &#x27;909&#x27;, &#x27;929&#x27;, &#x27;987&#x27;]"}, {"fullname": "atlus.resources.ABBR_JOIN", "modulename": "atlus.resources", "qualname": "ABBR_JOIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;ARPT|BLDG|CONF|CONV|CNTR|CTR|DWTN|INTL|FT|MT|MTN|SHPG|ACC|ALY|ANX|ARC|AV|AVE|BYU|BCH|BND|BLF|BLFS|BTM|BLVD|BR|BRG|BRK|BRKS|BG|BGS|BYP|CP|CY|CYN|CPE|CTRS|CIR|CIRS|CLF|CLFS|CLB|CMN|CMNS|COR|CORS|CRSE|CT|CTS|CV|CVS|CRK|CRES|CRST|CSWY|CURV|DL|DM|DV|DR|DRS|EST|EXPY|EXPWY|EXT|EXTS|FGR|FGRS|FLS|FLD|FLDS|FLT|FLTS|FRD|FRDS|FRST|FRG|FRGS|FRK|FRKS|FRY|FRYS|FOR|FORS|FWY|GD|GDN|GDNS|GTWY|GLN|GLNS|GN|GNS|GRN|GRNS|GRV|GRVS|HBR|HBRS|HGWY|HVN|HTS|HWY|HL|HLS|HOLW|INLT|IS|ISS|JCT|JCTS|KY|KYS|KNL|KNLS|LK|LKS|LNDG|LN|LGT|LGTS|LF|LCK|LCKS|LDG|LP|MNR|MNRS|MDW|MDWS|ML|MLS|MSN|MTWY|MTNS|NCK|ORCH|OPAS|PKY|PKWY|PSGE|PNE|PNES|PL|PLN|PLNS|PLZ|PT|PTS|PRT|PRTS|PR|PVT|RADL|RNCH|RPD|RPDS|RST|RDG|RDGS|RIV|RD|RDS|RT|RTE|SHL|SHLS|SHR|SHRS|SKWY|SPG|SPGS|SQ|SQS|STA|STRA|STRM|STS|SMT|SRVC|TER|TRWY|THFR|TRCE|TRAK|TRFY|TRL|TRLR|TUNL|TPKE|UPAS|UN|UNP|UNS|VIA|VIAS|VLY|VLYS|VW|VWS|VLG|VL|VIS|WK|WKWY|WY|WL|WLS|XING|XINGS|XRD|XRDS|YU&#x27;"}, {"fullname": "atlus.resources.abbr_join_comp", "modulename": "atlus.resources", "qualname": "abbr_join_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&quot;(\\\\b(?:ARPT|BLDG|CONF|CONV|CNTR|CTR|DWTN|INTL|FT|MT|MTN|SHPG|ACC|ALY|ANX|ARC|AV|AVE|BYU|BCH|BND|BLF|BLFS|BTM|BLVD|BR|BRG|BRK|BRKS|BG|BGS|BYP|CP|CY|CYN|CPE|CTRS|CIR|CIRS|CLF|CLFS|CLB|CMN|CMNS|COR|CORS|CRSE|CT|CTS|CV|CVS|CRK|CRES|CRST|CSWY|CURV|DL|DM|DV|DR|DRS|EST|EXPY|EXPWY|EXT|EXTS|FGR|FGRS|FLS|FLD|FLDS|FLT|FLTS|FRD|FRDS|FRST|FRG|FRGS|FRK|FRKS|FRY|FRYS|FOR|FORS|FWY|GD|GDN|GDNS|GTWY|GLN|GLNS|GN|GNS|GRN|GRNS|GRV|GRVS|HBR|HBRS|HGWY|HVN|HTS|HWY|HL|HLS|HOLW|INLT|IS|ISS|JCT|JCTS|KY|KYS|KNL|KNLS|LK|LKS|LNDG|LN|LGT|LGTS|LF|LCK|LCKS|LDG|LP|MNR|MNRS|MDW|MDWS|ML|MLS|MSN|MTWY|MTNS|NCK|ORCH|OPAS|PKY|PKWY|PSGE|PNE|PNES|PL|PLN|PLNS|PLZ|PT|PTS|PRT|PRTS|PR|PVT|RADL|RNCH|RPD|RPDS|RST|RDG|RDGS|RIV|RD|RDS|RT|RTE|SHL|SHLS|SHR|SHRS|SKWY|SPG|SPGS|SQ|SQS|STA|STRA|STRM|STS|SMT|SRVC|TER|TRWY|THFR|TRCE|TRAK|TRFY|TRL|TRLR|TUNL|TPKE|UPAS|UN|UNP|UNS|VIA|VIAS|VLY|VLYS|VW|VWS|VLG|VL|VIS|WK|WKWY|WY|WL|WLS|XING|XINGS|XRD|XRDS|YU)\\\\b\\\\.?)(?!&#x27;)&quot;, flags=regex.I | regex.V0)"}, {"fullname": "atlus.resources.DIR_FILL", "modulename": "atlus.resources", "qualname": "DIR_FILL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;N\\\\.?E|S\\\\.?E|N\\\\.?W|S\\\\.?W|N|E|S|W&#x27;"}, {"fullname": "atlus.resources.dir_fill_comp", "modulename": "atlus.resources", "qualname": "dir_fill_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&quot;(?&lt;!(?:^(?:Avenue) |[\\\\.&#x27;]))(\\\\b(?:N\\\\.?E|S\\\\.?E|N\\\\.?W|S\\\\.?W|N|E|S|W)\\\\b\\\\.?)(?!(?:\\\\.?[a-zA-Z]| (?:Street|Avenue)))&quot;, flags=regex.I | regex.V0)"}, {"fullname": "atlus.resources.sr_comp", "modulename": "atlus.resources", "qualname": "sr_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;(\\\\bS\\\\.?R\\\\b\\\\.?)(?= \\\\d+)&#x27;, flags=regex.I | regex.V0)"}, {"fullname": "atlus.resources.saint_comp", "modulename": "atlus.resources", "qualname": "saint_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;^(St\\\\.?)(?= )|(\\\\bSt\\\\.?)(?= (?:Abigail|Agatha|Agnes|Andrew|Anthony|Augustine|Bernadette|Brigid|Catherine|Charles|Christopher|Clare|Cloud|Dymphna|Elizabeth|Faustina|Felix|Francis|Gabriel,|George|Gerard|James|Joan|John|Joseph|Jude|Kateri|Louis|Lucie|Lucy|Luke|Maria|Mark|Martin|Mary|Maximilian|Michael|Monica|Padre|Patrick|Paul|Peter|Philomena|Raphael|Rita|Rose|Sebastian|Teresa|Therese|Thomas|Valentine|Victor|Vincent))&#x27;, flags=regex.I | regex.V0)"}, {"fullname": "atlus.resources.street_comp", "modulename": "atlus.resources", "qualname": "street_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;St\\\\.?(?= [NESW]\\\\.?[EW]?\\\\.?)|(?&lt;=\\\\d[thndstr]{2} )St\\\\.?\\\\b|St\\\\.?$&#x27;, flags=regex.V0)"}, {"fullname": "atlus.resources.post_comp", "modulename": "atlus.resources", "qualname": "post_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;(\\\\d{5})-?0{4}&#x27;, flags=regex.V0)"}, {"fullname": "atlus.resources.usa_comp", "modulename": "atlus.resources", "qualname": "usa_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;,? (?:USA?|United States(?: of America)?|Canada)\\\\b&#x27;, flags=regex.V0)"}, {"fullname": "atlus.resources.paren_comp", "modulename": "atlus.resources", "qualname": "paren_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27; ?\\\\(.*\\\\)&#x27;, flags=regex.V0)"}, {"fullname": "atlus.resources.grid_comp", "modulename": "atlus.resources", "qualname": "grid_comp", "kind": "variable", "doc": "<p></p>\n", "default_value": "regex.Regex(&#x27;\\\\b([NnSs]\\\\d{2,}\\\\s*[EeWw]\\\\d{2,}|[EeWw]\\\\d{2,}\\\\s*[NnSs]\\\\d{2,})\\\\b&#x27;, flags=regex.V0)"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();